package routines;

import java.io.File;
import java.net.URLDecoder;
import java.security.CodeSource;
import java.security.SignatureException;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;


/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class faktum {

	/* inspireret af https://www.rilhia.com/tutorials/talend-connect-example*/
	/* anvendes til at sende et datasæt fra parent job til child job */
	
	private Long extract_interval_id;
	private Long new_source_ident_to;
	
	public faktum(Long extract_interval_id, Long new_source_ident_to){
		this.extract_interval_id = extract_interval_id;
		this.new_source_ident_to = new_source_ident_to;
	}

	public Long get_extract_interval_id() {
		return extract_interval_id;
	}

	public void set_extract_interval_id(Long extract_interval_id) {
		this.extract_interval_id = extract_interval_id;
	}
	
	public Long get_new_source_ident_to() {
		return new_source_ident_to;
	}

	public void set_new_source_ident_to(Long new_source_ident_to) {
		this.new_source_ident_to = new_source_ident_to;
	}

	/**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
/*	
    public static void helloExample(String message) {
        if (message == null) {
            message = "World"; //$NON-NLS-1$
        }
        System.out.println("Hello " + message + " !"); //$NON-NLS-1$ //$NON-NLS-2$
    }
*/    
    public String getJarFolder() {
    	String name = this.getClass().getName().replace('.', '/');
        String s = getClass().getResource("/" + name + ".class").toString();
        s = s.replace('/', File.separatorChar);
        s = s.substring(0, s.indexOf(".jar")+4);
        s = s.substring(s.lastIndexOf(':')-1);
        return s.substring(0, s.lastIndexOf(File.separatorChar)+1);
    }

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExample("world") # hello world !.
     */
    public static String getCurrentFileLocation(@SuppressWarnings("rawtypes") Class aclass) throws Exception {
    	  
    	  CodeSource codeSource = aclass.getProtectionDomain().getCodeSource();

    	  File jarFile;

    	  if (codeSource.getLocation() != null) {
    	    jarFile = new File(codeSource.getLocation().toURI());
    	  }
    	  else {
    	    String path = aclass.getResource(aclass.getSimpleName() + ".class").getPath();
    	    String jarFilePath = path.substring(path.indexOf(":") + 1, path.indexOf("!"));
    	    jarFilePath = URLDecoder.decode(jarFilePath, "UTF-8");
/*    	    jarFile = new File(jarFilePath);*/
    	    jarFile = new File(path);
    	  }
/*    	  return jarFile.getParentFile().getAbsolutePath();*/
    	  String path = jarFile.getAbsolutePath().toString();
    	  if (path.indexOf(".jar") == -1) {
    		path = path + System.getProperty("file.separator") + aclass.getName().replace(".",System.getProperty("file.separator")) + ".class";  
    	  }
    	  return path;
    	}

    /**
     * calculateChecksumMD5: returns MD5 checksum.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("Hello world") input: The string need to be MD5'ifyed.
     * 
     * {example} calculateChecksumMD5("Hello world") # hello world !.
     */
/*
 * inspired by http://www.monitis.com/api/rest_api/user/checkSum_example.html
 */
	public static String calculateChecksumMD5(String data) throws java.security.SignatureException {
		String result = null;
		try {
			Mac mac = Mac.getInstance("HmacMD5");
			SecretKeySpec key = new SecretKeySpec("Faktum Warehouse Suite".getBytes("UTF-8"), "HmacMD5");
			mac.init(key);
			byte[] bytes = mac.doFinal(data.getBytes("ASCII"));
			
			StringBuffer hash = new StringBuffer();
		      for (int i = 0; i < bytes.length; i++) {
		        String hex = Integer.toHexString(0xFF & bytes[i]);
		        if (hex.length() == 1) {
		          hash.append('0');
		        }
		        hash.append(hex);
		      }
		      result = hash.toString();
			
		} catch (Exception e) {
			throw new SignatureException("Failed to generate checksum : " + e.getMessage());
		}
		return result;
		}	  






    /**
     * getEasterDate: Returns the date of easter day for a given year supplied as parameter.
     * Easter day is calculated according to western standard. 
     * See https://en.wikipedia.org/wiki/Computus for details.
     * 
     * {talendTypes} Date
     * 
     * {Category} User Defined
     * 
     * {param} int(2016) year: The year for which to calculate easter sunday.
     * 
     * {example} getEasterDate(2016) # 27-03-2016.
     
     */
    public static Date getEasterDate(int year) {
    	int a = year % 19;
    	int b = year / 100;
    	int c = year % 100;
    	int d = b / 4;
    	int e = b % 4;
    	int f = (b + 8) / 25;
    	int g = (b - f + 1) / 3;
    	int h = (19 * a + b - d - g + 15) % 30;
    	int i = c / 4;
    	int k = c % 4;
    	int l = (32 + 2 * e + 2 * i - h - k) % 7;
    	int m = (a + 11 * h + 22 * l) / 451;
    	int n = (h + l - 7 * m + 114) / 31;
    	int p = (h + l - 7 * m + 114) % 31;
    	Calendar calendar = GregorianCalendar.getInstance();
    	calendar.clear();
    	calendar.set(year, n - 1, p + 1);
    	return calendar.getTime();
    }

    /**
     * getHoliday: For a given date it returns the name of the holiday or a blank string if it is not a holiday.
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} Date(2016-08-16) dt: The date to evaluate if it is a holiday
     * 
     * {example} getHoliday(2016-08-16) # 27-03-2016.
     
     */

    public static String getHoliday(Date thisDate) {

    	Integer year = TalendDate.getPartOfDate("YEAR", thisDate);
    	Integer monthNo = TalendDate.getPartOfDate("MONTH", thisDate) + 1;
    	Integer dayNo = TalendDate.getPartOfDate("DAY_OF_MONTH", thisDate);
    	Date leapDate ;
    	Date easterSunday ;
    	String holidayText ;
    	Integer carnivalDay ;
    	Integer leapDayPlus1No ;
     
    	// Check for leap year
    	leapDate = TalendDate.parseDate("yyyyMMdd", Integer.toString(year)+"0228");
    	leapDayPlus1No = TalendDate.getPartOfDate("DAY", TalendDate.addDate(leapDate, 1, "dd"));
    	if (leapDayPlus1No.equals(29)) {
    		carnivalDay = -50;
    	}
    	else {
    		carnivalDay = -49;
    	} 
    	
    	easterSunday = getEasterDate(year);
    	//System.out.print("thisDate: " + TalendDate.formatDate("yyyy-MM-dd", thisDate));
    	//System.out.print(", Year: " + year);
    	//System.out.print(", easterSunday: "+TalendDate.formatDate("yyyy-MM-dd", easterSunday));
    	//System.out.print(", Month: " + monthNo);
    	//System.out.println(", Day: " + dayNo);
    	
    	if (thisDate.equals(TalendDate.addDate(easterSunday, carnivalDay, "dd"))) {
    		holidayText = "Fastelavn";
    	}
    	else if (thisDate.equals(TalendDate.addDate(easterSunday,-7,"dd"))) {
    		holidayText = "Palmesøndag";
    	}
    	else if (thisDate.equals(TalendDate.addDate(easterSunday,-3,"dd"))) {
    		holidayText = "Skærtorsdag";
    	}
    	else if (thisDate.equals(TalendDate.addDate(easterSunday,-2,"dd"))) {
    		holidayText = "Langfredag";
    	}
    	else if (thisDate.equals(easterSunday)) {
    		holidayText = "Første påskedag";
    	}
    	else if (thisDate.equals(TalendDate.addDate(easterSunday,1,"dd"))) {
    		holidayText = "Anden påskedag";
    	}
    	else if (thisDate.equals(TalendDate.addDate(easterSunday,26,"dd"))) {
    		holidayText = "Store bededag";
    	}
    	else if (thisDate.equals(TalendDate.addDate(easterSunday,39,"dd"))) {
    		holidayText = "Kristi himmelfart";
    	}
    	else if (thisDate.equals(TalendDate.addDate(easterSunday,49,"dd"))) {
    		holidayText = "Pinsedag";
    	}
    	else if (thisDate.equals(TalendDate.addDate(easterSunday,50,"dd"))) {
    		holidayText = "Anden pinsedag";
    	}
    	else if (thisDate.equals(TalendDate.addDate(easterSunday,50,"dd"))) {
    		holidayText = "Anden pinsedag";
    	}
    	else if (monthNo.equals(1) && dayNo.equals(1)) {
    		holidayText = "Første nytårsdag";
    	}
    	else if (monthNo.equals(6) && dayNo.equals(5)) {
    		holidayText = "Grundlovsdag";
    	}
    	else if (monthNo.equals(12) && dayNo.equals(24)) {
    		holidayText = "Juleaften";
    	}
    	else if (monthNo.equals(12) && dayNo.equals(25)) {
    		holidayText = "Første juledag";
    	}
    	else if (monthNo.equals(12) && dayNo.equals(26)) {
    		holidayText = "Anden juledag";
    	}
    	else if (monthNo.equals(12) && dayNo.equals(31)) {
    		holidayText = "Nytårsaften";
    	}
    	else {
    		holidayText = "Hverdag";
    	}
    	
    	return holidayText;
	}	// End of getHoliday
}